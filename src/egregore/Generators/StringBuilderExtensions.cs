// Copyright (c) The Egregore Project & Contributors. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Runtime.InteropServices;
using System.Text;

namespace egregore.Generators
{
    internal static class StringBuilderExtensions
    {
        public static IStringBuilder InsertAutoGeneratedHeader(this IStringBuilder sb)
        {
            var h = new StringBuilder();
            AppendAutoGeneratedHeader(h);
            sb.Insert(0, h);
            return sb;
        }

        public static void AppendAutoGeneratedHeader(this StringBuilder sb)
        {
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//     This code was generated by a tool.");
            sb.AppendLine($"//     Runtime Version: {RuntimeInformation.FrameworkDescription}");
            sb.AppendLine("//");
            sb.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            sb.AppendLine("//     the code is regenerated.");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine();
        }

        public static StringBuilder AppendLine(this StringBuilder sb, int indent, string message)
        {
            if (indent > 0)
                AppendTabSpaces(sb, indent);
            sb.AppendLine(message);
            return sb;
        }

        public static IStringBuilder AppendLine(this IStringBuilder sb, int indent, string message)
        {
            if (indent > 0)
                AppendTabSpaces(sb, indent);
            sb.AppendLine(message);
            return sb;
        }

        public static StringBuilder AppendLine(this StringBuilder sb, string message, bool condition)
        {
            if (!condition)
                return sb;
            sb.AppendLine(message);
            return sb;
        }

        private static StringBuilder AppendTabSpaces(StringBuilder sb, int indent, int tabLength = 4)
        {
            for (var i = 0; i < indent; i++)
                sb.Append(new string(' ', tabLength));
            return sb;
        }

        private static IStringBuilder AppendTabSpaces(IStringBuilder sb, int indent, int tabLength = 4)
        {
            for (var i = 0; i < indent; i++)
                sb.Append(new string(' ', tabLength));
            return sb;
        }
    }
}