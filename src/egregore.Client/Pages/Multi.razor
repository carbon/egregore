@page "/multi"
@using System.IO
@using System.Net.Http.Headers
@using System.Net.Mime
@using System.Threading
@using BlazorInputFile
@using egregore.Models

<h1>Multiple files</h1>

<p>A multi-file picker that displays information about selection and shows progress as each one is loaded.</p>

<label for="uploadFiles">Select File(s)</label>
<InputFile id="uploadFiles" multiple OnChange="HandleSelection" />

<label for="uploadFolder">Select Folder</label>
<InputFile id="uploadFolder" multiple webkitdirectory OnChange="HandleSelection" />

@if (selectedFiles != null)
{
    foreach (var file in selectedFiles)
    {
        var isLoading = file.Data.Position > 0;

        <div class="file-row">
            <!-- File info -->
            <div>
                <h2>@file.Name</h2>
                Size: <strong>@file.Size bytes</strong>;
                Last modified: <strong>@file.LastModified.ToShortDateString()</strong>;
                Type: <strong>@file.Type</strong>
                Relative Path: <strong>@file.RelativePath</strong>
            </div>

            <!-- Upload button -->
            <button @onclick="() => LoadFile(file)" disabled="@isLoading">
                @if (!isLoading && ViewModel == default)
                {
                    <span>Load</span>
                }
                else
                {
                    <span>Loaded @GetFileProgress(file)</span>
                }
            </button>
            
            @if(ViewModel != null)
            {
                <img src="@Source" />
            }
        </div>
    }
}

@code {
    IFileListEntry[] selectedFiles;


    [Inject]
    public HttpClient Http { get; set; }

    private MediaEntryViewModel ViewModel { get; set; }
    private string Source { get; set; }

    void HandleSelection(IFileListEntry[] files)
    {
        selectedFiles = files;
    }

    async Task LoadFile(IFileListEntry file)
    {
        file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

        var image = await file.ToImageFileAsync(file.Type, 1000, 1000);

        var ms = new MemoryStream();
        await image.Data.CopyToAsync(ms);

        var buffer = ms.ToArray();
        var content = new ByteArrayContent(buffer);
        content.Headers.ContentType = MediaTypeHeaderValue.Parse(file.Type);

        var response = await Http.PostAsync("media", content, CancellationToken.None);
        var media = await response.Content.ReadFromJsonAsync<MediaEntryViewModel>();
        ViewModel = media;
        Source = response.Headers.Location.ToString();
    }


    private string GetFileProgress(IFileListEntry file)
    {
        if (ViewModel != default)
            return ViewModel.Uuid.ToString();

        return (100.0 * file.Data.Position / file.Size).ToString("0") + "%";
    }

}